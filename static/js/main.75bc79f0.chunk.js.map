{"version":3,"sources":["components/piano_keys/Key.jsx","components/Piano.jsx","App.js","serviceWorker.js","index.js"],"names":["Key","props","useState","pressed","setPressed","noteAudioId","character","myAudio","document","getElementById","addEventListener","e","code","play","pause","currentTime","type","className","style","left","position","id","src","audio","Piano","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAGe,SAASA,EAAIC,GAAQ,IAAD,EACDC,oBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,KAEzBC,EAAc,OAASJ,EAAMK,UAC/BC,EAAUC,SAASC,eAAeJ,GAsBtC,OArBAG,SAASE,iBAAiB,WAAW,SAACC,GAC9BA,EAAEC,MAAQX,EAAMK,YAChBF,GAAW,GACPG,GACAA,EAAQM,WAIpBL,SAASE,iBAAiB,SAAS,SAACC,GAC5BA,EAAEC,MAAQX,EAAMK,YAChBF,GAAW,GACPG,IACAA,EAAQO,QACRP,EAAQQ,YAAc,OAQ9BZ,EACkB,SAAdF,EAAMe,KAEF,yBAAKC,UAAWhB,EAAMe,KAAO,eAAgBE,MAAO,CAACC,KAAKlB,EAAMmB,WAC5D,2BAAOC,GAAIhB,EAAaiB,IAAKrB,EAAMsB,SAMvC,yBAAKN,UAAWhB,EAAMe,KAAO,gBACzB,2BAAOK,GAAIhB,EAAaiB,IAAKrB,EAAMsB,SAM7B,SAAdtB,EAAMe,KAEF,yBAAKC,UAAWhB,EAAMe,KAAO,iBAAkBE,MAAO,CAACC,KAAKlB,EAAMmB,WAC9D,2BAAOC,GAAIhB,EAAaiB,IAAKrB,EAAMsB,SAMvC,yBAAKN,UAAWhB,EAAMe,KAAO,kBACzB,2BAAOK,GAAIhB,EAAaiB,IAAKrB,EAAMsB,S,MClDxC,SAASC,EAAMvB,GAC1B,OACI,yBAAKgB,UAAU,SACX,kBAACjB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,gCAAgCP,KAAK,UACjE,kBAAChB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,iCAAiCP,KAAK,QAAQI,SAAS,SACnF,kBAACpB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,iCAAiCP,KAAK,QAAQI,SAAS,QACnF,kBAACpB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,iCAAiCP,KAAK,QAAQI,SAAS,QACnF,kBAACpB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,iCAAiCP,KAAK,QAAQI,SAAS,WACnF,kBAACpB,EAAD,CAAKM,UAAU,OAAOiB,MAAM,iCAAiCP,KAAK,QAAQI,SAAS,SCLhFK,MAVf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,SCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75bc79f0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './White.css';\n\nexport default function Key(props) {\n    const [pressed, setPressed] = useState(false);\n    const noteAudioId = 'note' + props.character;\n    let myAudio = document.getElementById(noteAudioId);//Added props.character so that each initialized key has a separate ID\n    document.addEventListener('keydown', (e) => {   //Plays audio and sets key color while pressed down\n        if (e.code == props.character) {\n            setPressed(true);\n            if (myAudio) {\n                myAudio.play();\n            }\n        }\n    });\n    document.addEventListener('keyup', (e) => {     //Stops audio and resets time to beginning. Resets key color as well\n        if (e.code == props.character) {\n            setPressed(false);\n            if (myAudio) {\n                myAudio.pause();\n                myAudio.currentTime = 0;\n            }\n        }\n    });\n\n    //https://sndup.net/6jx7/E.wav\n    //https://sndup.net/9tqm/C4.mp3\n    //ew fix this, only change is css\n    if (pressed) {\n        if (props.type == \"black\") {\n            return (\n                <div className={props.type + '-key-pressed'} style={{left:props.position}}>\n                    <audio id={noteAudioId} src={props.audio}/>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={props.type + '-key-pressed'}>\n                    <audio id={noteAudioId} src={props.audio}/>\n                </div>\n            );\n        }\n    }\n    else {\n        if (props.type == \"black\") {\n            return (\n                <div className={props.type + '-key-unpressed'} style={{left:props.position}}>\n                    <audio id={noteAudioId} src={props.audio}/>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={props.type + '-key-unpressed'}>\n                    <audio id={noteAudioId} src={props.audio}/>\n                </div>\n            );\n        }\n    }\n\n}","import React from 'react';\nimport Key from './piano_keys/Key';\nimport './Piano.css';\nimport './piano_keys/White.css';\n\nexport default function Piano(props) {\n    return (\n        <div className='piano'>\n            <Key character=\"KeyA\" audio='https://sndup.net/9tqm/C4.mp3' type='white'/>\n            <Key character=\"KeyS\" audio='https://sndup.net/4hhm/D4.mp3' type='white'/>\n            <Key character=\"KeyD\" audio='https://sndup.net/5ycf/E4.mp3' type='white'/>\n            <Key character=\"KeyF\" audio='https://sndup.net/2xdz/F4.mp3' type='white'/>\n            <Key character=\"KeyG\" audio='https://sndup.net/2m9k/G4.mp3' type='white'/>\n            <Key character=\"KeyH\" audio='https://sndup.net/98g8/A4.mp3' type='white'/>\n            <Key character=\"KeyJ\" audio='https://sndup.net/6gq9/B4.mp3' type='white'/>\n            <Key character=\"KeyW\" audio='https://sndup.net/4pnb/Cs4.mp3' type='black' position=\"9.3%\"/>\n            <Key character=\"KeyE\" audio='https://sndup.net/4s7k/Ds4.mp3' type='black' position=\"25%\"/>\n            <Key character=\"KeyT\" audio='https://sndup.net/9tkc/Fs4.mp3' type='black' position=\"52%\"/>\n            <Key character=\"KeyY\" audio='https://sndup.net/9nhm/Gs4.mp3' type='black' position=\"67.35%\"/>\n            <Key character=\"KeyU\" audio='https://sndup.net/437d/As4.mp3' type='black' position=\"83%\"/>\n        </div>\n    )\n}\n/*\n<div style={{width:'28px', height:'120px', backgroundColor:'black', position:'absolute', top:'0%', left:'9.3%', 'z-index':10}}/>\n<div style={{width:'28px', height:'120px', backgroundColor:'black', position:'absolute', top:'0%', left:'26%', 'z-index':10}}/>\n*/\n","import React from 'react';\nimport './App.css';\nimport Piano from './components/Piano'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Piano/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}